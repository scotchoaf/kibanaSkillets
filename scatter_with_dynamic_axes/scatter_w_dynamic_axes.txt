{
  $schema: https://vega.github.io/schema/vega/v4.3.json
  padding: {top: 10, left: 10, bottom: 20, right: 10}
  autosize: fit
  config: {
    axis: {
      domain: false
      tickSize: 3
      tickColor: "#888"
      labelFont: Monaco, Courier New
    }
  }
  data: [
    {
      name: points
      url: {
        index: {{ index }}*
        %context%: true
        // comment out if no timefield in the data
        {%- if use_timeField == "yes" %}
        %timefield%: {{ timefield }}
        {% else %}
        // %timefield%: {{ timefield }}
        {% endif %}
        body: {
          size: 0
          aggs: {
            aggData: {
              terms: {field: "{{ aggField }}.keyword", size: 10000}
              aggs: {
                metrics: {
                  top_hits: {}
                }
              }
            }
          }
        }
      }
      format: {property: "aggregations.aggData.buckets"}
      transform: [
        {
          type: extent
          field: metrics.hits.hits[0]._source['{{ xAxisField }}']
          signal: xext
        }
        {
          type: extent
          field: metrics.hits.hits[0]._source['{{ yAxisField }}']
          signal: yext
        }
         {type: "formula", expr: "datum.metrics.hits.hits[0]._source['{{ aggField }}']", as: "{{ aggFieldAlias }}"},
         {type: "formula", expr: "datum.metrics.hits.hits[0]._source['{{ xAxisField }}']", as: "{{ xAxisFieldAlias }}"},
         {type: "formula", expr: "datum.metrics.hits.hits[0]._source['{{ yAxisField }}']", as: "{{ yAxisFieldAlias }}"},
         {type: "formula", expr: "datum.metrics.hits.hits[0]._source['{{ colorByField }}']", as: "{{ colorByFieldAlias }}"},
       {% if includeSize == 'yes' %}
         {type: "formula", expr: "datum.metrics.hits.hits[0]._source['{{ sizeByField }}']", as: "{{ sizeByFieldAlias }}"},
       {% endif %}
      ]
    }
  ]
  signals: [
    {name: "margin", value: 20}
    {
      name: hover
      on: [
        {events: "*:mouseover", encode: "hover"}
        {events: "*:mouseout", encode: "leave"}
        {events: "*:mousedown", encode: "select"}
        {events: "*:mouseup", encode: "release"}
      ]
    }
    {
      name: xoffset
      update: -(height + padding.bottom)
    }
    {name: "yoffset", update: "-(width + padding.left)"}
    {name: "xrange", update: "[0, width]"}
    {name: "yrange", update: "[height, 0]"}
    {
      name: down
      value: null
      on: [
        {events: "touchend", update: "null"}
        {events: "mousedown, touchstart", update: "xy()"}
      ]
    }
    {
      name: xcur
      value: null
      on: [
        {
          events: mousedown, touchstart, touchend
          update: slice(xdom)
        }
      ]
    }
    {
      name: ycur
      value: null
      on: [
        {
          events: mousedown, touchstart, touchend
          update: slice(ydom)
        }
      ]
    }
    {
      name: delta
      value: [0, 0]
      on: [
        {
          events: [
            {
              source: window
              type: mousemove
              consume: true
              between: [
                {type: "mousedown"}
                {source: "window", type: "mouseup"}
              ]
            }
            {
              type: touchmove
              consume: true
              filter: event.touches.length === 1
            }
          ]
          update: down ? [down[0]-x(), y()-down[1]] : [0,0]
        }
      ]
    }
    {
      name: anchor
      value: [0, 0]
      on: [
        {
          events: wheel
          update: "[invert('xscale', x()), invert('yscale', y())]"
        }
        {
          events: {
            type: touchstart
            filter: event.touches.length===2
          }
          update: "[(xdom[0] + xdom[1]) / 2, (ydom[0] + ydom[1]) / 2]"
        }
      ]
    }
    {
      name: zoom
      value: 1
      on: [
        {
          events: wheel!
          force: true
          update: pow(1.001, event.deltaY * pow(16, event.deltaMode))
        }
        {
          events: {signal: "dist2"}
          force: true
          update: dist1 / dist2
        }
      ]
    }
    {
      name: dist1
      value: 0
      on: [
        {
          events: {
            type: touchstart
            filter: event.touches.length===2
          }
          update: pinchDistance(event)
        }
        {
          events: {signal: "dist2"}
          update: dist2
        }
      ]
    }
    {
      name: dist2
      value: 0
      on: [
        {
          events: {
            type: touchmove
            consume: true
            filter: event.touches.length===2
          }
          update: pinchDistance(event)
        }
      ]
    }
    {
      name: xdom
      update: slice(xext)
      on: [
        {
          events: {signal: "delta"}
          update: "[xcur[0] + span(xcur) * delta[0] / width, xcur[1] + span(xcur) * delta[0] / width]"
        }
        {
          events: {signal: "zoom"}
          update: "[anchor[0] + (xdom[0] - anchor[0]) * zoom, anchor[0] + (xdom[1] - anchor[0]) * zoom]"
        }
      ]
    }
    {
      name: ydom
      update: slice(yext)
      on: [
        {
          events: {signal: "delta"}
          update: "[ycur[0] + span(ycur) * delta[1] / height, ycur[1] + span(ycur) * delta[1] / height]"
        }
        {
          events: {signal: "zoom"}
          update: "[anchor[1] + (ydom[0] - anchor[1]) * zoom, anchor[1] + (ydom[1] - anchor[1]) * zoom]"
        }
      ]
    }
  ]
  scales: [
    {
      name: xscale
      zero: false
      domain: {signal: "xdom"}
      range: {signal: "xrange"}
    }
    {
      name: yscale
      zero: false
      domain: {signal: "ydom"}
      range: {signal: "yrange"}
    }
    {
      name: color
      type: ordinal
      domain: {
        data: points
        field: {{ colorByFieldAlias }}
      }
      range: {scheme: "category10"}
    }
   {% if includeSize == 'yes' %}
    {
      name: size
      type: linear
      round: true
      nice: false
      zero: true
      domain: {
        data: points
        field: {{ sizeByFieldAlias }}
      }
      range: [500, 5000]
    }
    {% endif %}
  ]
  legends: [
    {
      fill: color
      title: {{ colorByFieldAlias }}
      // symbolStrokeColor: "#4682b4"
      // symbolStrokeWidth: 2
      symbolOpacity: 0.5
      symbolType: circle
      symbolSize: 100
    }
   {% if includeSize == 'yes' %}
    {
      size: size
      title: {{ sizeByFieldAlias }}
      format: s
      symbolStrokeColor: "#4682b4"
      symbolStrokeWidth: 2
      symbolOpacity: 0.5
      symbolType: circle
    }
    {% endif %}
  ]
  axes: [
    {
      scale: xscale
      grid: true
      domain: true
      orient: top
      offset: {signal: "xoffset"}
      tickCount: 5
      title: {{ xAxisFieldAlias }}
      titlePadding: -50
    }
    {
      scale: yscale
      grid: true
      orient: right
      offset: {signal: "yoffset"}
      title: {{ yAxisFieldAlias }}
      titlePadding: -50
    }
  ]
  marks: [
    {
      type: symbol
      from: {data: "points"}
      clip: true
      encode: {
        enter: {
          shape: {value: "circle"}
          strokeWidth: {value: 2}
          opacity: {value: 0.5}
          stroke: {
            scale: color
            field: {{ colorByFieldAlias }}
          }
          fill: {
            scale: color
            field: {{ colorByFieldAlias }}
          }
         {% if includeSize == 'yes' %}
          size: {
            scale: size
            field: {{ sizeByFieldAlias }}
          }
          {% else %}
          size: value: 500
          {% endif %}
          tooltip: {
            signal: "{title: datum.{{ aggFieldAlias }},
            {{ colorByFieldAlias }}: datum.{{ colorByFieldAlias }},
            }"
          }
        }
        update: {
          x: {
            scale: xscale
            field: {{ xAxisFieldAlias }}
          }
          y: {
            scale: yscale
            field: {{ yAxisFieldAlias }}
          }
        }
        hover: {
          fill: {value: "red"}
        }
        leave: {
          fill: {
            scale: color
            field: {{ colorByFieldAlias }}
          }
        }
      }
    }
  ]
}